name: RepoClone Intelligence - Auto Enforcement

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  structure-validation:
    runs-on: ubuntu-latest
    name: üß† Structure Validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Run structure validation
      run: |
        echo "üîç RepoClone Intelligence: GitHub Actions Structure Validation"
        echo "============================================================"
        
        # Check for frontend code in backend-logic (except templates)
        FRONTEND_IN_BACKEND=$(find backend-logic -name "*.tsx" -o -name "*.jsx" -o -name "*.vue" 2>/dev/null | grep -v "project-templates" || true)
        if [ ! -z "$FRONTEND_IN_BACKEND" ]; then
          echo "‚ùå VIOLATION: Frontend files found in backend-logic (outside templates):"
          echo "$FRONTEND_IN_BACKEND"
          exit 1
        fi
        
        # Check for backend logic in project root (except backend-logic folder and run.js)
        BACKEND_IN_ROOT=$(find . -maxdepth 1 -name "*.ts" -o -name "*.js" | grep -v "backend-logic" | grep -v "node_modules" | grep -v ".git" | grep -v "run.js" || true)
        if [ ! -z "$BACKEND_IN_ROOT" ]; then
          echo "‚ùå VIOLATION: Backend files found in project root:"
          echo "$BACKEND_IN_ROOT"
          exit 1
        fi
        
        # Check for projects inside backend-logic
        if [ -d "backend-logic/projects" ]; then
          PROJECTS_IN_BACKEND=$(find backend-logic/projects -maxdepth 1 -type d | grep -v "^backend-logic/projects$" | grep -v "^backend-logic/projects/$" || true)
          if [ ! -z "$PROJECTS_IN_BACKEND" ]; then
            echo "‚ùå VIOLATION: Projects found inside backend-logic:"
            echo "$PROJECTS_IN_BACKEND"
            echo "üí° Projects should be at root level, not inside backend-logic"
            exit 1
          fi
        fi
        
        # Validate intelligence files
        INTELLIGENCE_FILES=("README.md" "INTELLIGENCE.md" "STRUCTURE_RULES.md")
        for file in "${INTELLIGENCE_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå VIOLATION: Missing intelligence file: $file"
            exit 1
          fi
        done
        
        echo "‚úÖ RepoClone Intelligence: Structure validation passed!"
        echo "üéØ Template deployment system is properly structured"
        
  template-completeness:
    runs-on: ubuntu-latest
    name: üìã Template Completeness
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Validate templates
      run: |
        echo "üìã Validating template completeness..."
        TEMPLATE_VIOLATIONS=0
        
        for template in backend-logic/project-templates/*/; do
          if [ -d "$template" ]; then
            template_name=$(basename "$template")
            echo "üîç Checking template: $template_name"
            
            # Required files for each template
            required_files=("package.json" "README.md")
            for file in "${required_files[@]}"; do
              if [ ! -f "$template$file" ]; then
                echo "‚ùå Missing $file in $template_name"
                TEMPLATE_VIOLATIONS=$((TEMPLATE_VIOLATIONS + 1))
              fi
            done
            
            # Check for template-specific files
            if [[ "$template_name" == *"nextjs"* ]]; then
              if [ ! -f "$template/next.config.js" ]; then
                echo "‚ùå Missing next.config.js in $template_name"
                TEMPLATE_VIOLATIONS=$((TEMPLATE_VIOLATIONS + 1))
              fi
            fi
            
            # Check for components directory
            if [ ! -d "$template/components" ] && [ ! -d "$template/src/components" ]; then
              echo "‚ùå Missing components directory in $template_name"
              TEMPLATE_VIOLATIONS=$((TEMPLATE_VIOLATIONS + 1))
            fi
          fi
        done
        
        if [ $TEMPLATE_VIOLATIONS -eq 0 ]; then
          echo "‚úÖ All templates are complete and ready for deployment"
        else
          echo "‚ùå $TEMPLATE_VIOLATIONS template violations found"
          exit 1
        fi
        
  auto-commit:
    runs-on: ubuntu-latest
    name: ü§ñ Auto-Commit
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Run auto-commit
      run: |
        echo "ü§ñ RepoClone Intelligence: Auto-Commit"
        echo "====================================="
        
        # Check for changes that need auto-commit
        CHANGES=$(git status --porcelain)
        if [ ! -z "$CHANGES" ]; then
          echo "üìù Changes detected, running auto-commit..."
          node backend-logic/cli/auto-commit.js
        else
          echo "üìù No changes detected"
        fi
        
    - name: Push auto-commits
      run: |
        git push origin ${{ github.ref }} 